package island;

import island.entities.Animal;
import island.factory.AnimalFactory;
import island.map.Island;
import island.service.*;

import java.util.List;

public class SimulationEngine {
    private final Island island;

    // –°–µ—Ä–≤–∏—Å—ã-—Ñ–∞–∑—ã —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
    private final PlantService plantService;
    private final MovementService movementService;
    private final EatingService eatingService;
    private final ReproductionService reproductionService;
    private final StarvationService starvationService;

    private List<Animal> animals; // –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ (–¥–ª—è –∏–Ω—Ñ–æ)

    public SimulationEngine(Island island) {
        this.island = island;
        // –ß—É—Ç—å —É–≤–µ–ª–∏—á–∏–ª —Å–ø–∞–≤–Ω —Ä–∞—Å—Ç–µ–Ω–∏–π, —á—Ç–æ–±—ã —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ –Ω–µ –≤—ã–º–∏—Ä–∞–ª–∏ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
        this.plantService = new PlantService(island, 0.12);
        this.movementService = new MovementService(island);
        this.eatingService = new EatingService(island);
        this.reproductionService = new ReproductionService(island);
        this.starvationService = new StarvationService(island);
    }

    public void populate() {
        this.animals = AnimalFactory.createAnimals(island); // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–µ
        System.out.println("–ù–∞ –æ—Å—Ç—Ä–æ–≤–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∂–∏–≤–æ—Ç–Ω—ã–µ: " + animals.size());
    }

    private long countAlive() { // —Å—á–∏—Ç–∞—é –∂–∏–≤—ã—Ö –ø–æ –≤—Å–µ–º –∫–ª–µ—Ç–∫–∞–º
        long c = 0;
        for (int x = 0; x < island.getWidth(); x++)
            for (int y = 0; y < island.getHeight(); y++)
                c += island.getLocation(x, y).getAnimalsSnapshot().stream().filter(Animal::isAlive).count();
        return c;
    }

    public void start(int days) {
        System.out.println("üå¥ –°—Ç–∞—Ä—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Å—Ç—Ä–æ–≤–∞ " + island.getWidth() + "x" + island.getHeight());
        for (int day = 1; day <= days; day++) {
            plantService.run();           // —Ä–∞—Å—Ç–µ–Ω–∏—è —Ä–∞—Å—Ç—É—Ç/—Å–ø–∞–≤–Ω—è—Ç—Å—è
            movementService.run();        // —Ñ–∞–∑–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            eatingService.run();          // –∫–æ—Ä–º—ë–∂–∫–∞
            long eaten = eatingService.getAndResetEaten();

            reproductionService.run();    // —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            long born = reproductionService.getAndResetBorn();

            starvationService.run();      // —Å–ø–∞–¥ —Å—ã—Ç–æ—Å—Ç–∏ –∏ —Å–º–µ—Ä—Ç—å –æ—Ç –≥–æ–ª–æ–¥–∞
            long starved = starvationService.getAndResetStarved();

            long alive = countAlive();
            StatsPrinter.printDay(day, island, alive, born, eaten, starved); // —Å–≤–æ–¥–∫–∞ + –∫–∞—Ä—Ç–∞
            if (alive == 0) break;        // –µ—Å–ª–∏ –≤—Å–µ –≤—ã–º–µ—Ä–ª–∏ ‚Äî —Ä–∞–Ω–Ω–∏–π —Å—Ç–æ–ø
        }
        System.out.println("\nüåÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    }
}